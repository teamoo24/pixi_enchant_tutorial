{"version":3,"file":"anonymous.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/anonymous.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAqF;AAErF,yCAAoC;AAEpC,MAAa,UAAW,SAAQ,aAAI;IAApC;;QACa,SAAI,GAAG,QAAQ,CAAA;IAK5B,CAAC;IAHG,KAAK;QACD,OAAO,IAAI,UAAU,CAAA;IACzB,CAAC;CACJ;AAND,gCAMC;AAGD,IAAa,oBAAoB,GAAjC,MAAa,oBAAqB,SAAQ,mCAAsB;IAC5D,YAAY,CAAC,OAAgB,EAAE,IAAa;QACxC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC;eACpC,CAAC,CAAC,CAAE,IAAsB,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC;eAClE,CAAC,IAAI,CAAC,MAAM,CAAA;IACvB,CAAC;IAED,WAAW,CAAC,OAAgB,EAAE,IAAmB;QAC7C,OAAO,IAAI,UAAU,CAAA;IACzB,CAAC;CACJ,CAAA;AAVY,oBAAoB;IADhC,sBAAS,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;GACvB,oBAAoB,CAUhC;AAVY,oDAAoB","sourcesContent":["import * as ts from 'typescript';\n\nimport { Component, ConverterTypeComponent, TypeTypeConverter } from '../components';\nimport { Context } from '../context';\nimport { Type } from '../../models';\n\nexport class ObjectType extends Type {\n    readonly type = 'object'\n\n    clone() {\n        return new ObjectType\n    }\n}\n\n@Component({name: 'type:anonymous'})\nexport class ConditionalConverter extends ConverterTypeComponent implements TypeTypeConverter<ts.ObjectType> {\n    supportsType(context: Context, type: ts.Type): boolean {\n        return !!(type.flags & ts.TypeFlags.Object)\n            && !!((type as ts.ObjectType).objectFlags & ts.ObjectFlags.Anonymous)\n            && !type.symbol // No anonymous classes... not sure how to handle them yet.\n    }\n\n    convertType(context: Context, type: ts.ObjectType): ObjectType | undefined {\n        return new ObjectType\n    }\n}\n"]}