{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../../src/lib/converter2/converter.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAEjC,IAAI,GAAG,GAAG,CAAC,CAAA;AAEX,MAAa,cAAc;IAA3B;QACI,OAAE,GAAG,GAAG,EAAE,CAAA;IAEd,CAAC;CAAA;AAHD,wCAGC;AAED,MAAa,cAAe,SAAQ,cAAc;IAC9C,YACa,IAAY,EACZ,OAA+B;QAExC,KAAK,EAAE,CAAC;QAHC,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAAwB;IAG5C,CAAC;CACJ;AAPD,wCAOC;AAED,MAAa,oBAAqB,SAAQ,cAAc;IACpD,YACa,IAAY,EACZ,KAAsB;QAE/B,KAAK,EAAE,CAAC;QAHC,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAiB;IAGnC,CAAC;CACJ;AAPD,oDAOC;AAED,SAAgB,WAAW,CAAC,MAAiB;;IACzC,MAAM,YAAY,eAAG,MAAM,CAAC,eAAe,EAAE,0CAAE,MAAM,CAAC,EAAE,CAAC,iBAAiB,oCAAK,EAAE,CAAC;IAElF,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;QACtB,OAAO;KACV;AACL,CAAC;AAND,kCAMC","sourcesContent":["import * as ts from 'typescript';\n\nlet foo = 1\n\nexport class BaseReflection {\n    id = foo++\n    parent?: BaseReflection\n}\n\nexport class EnumReflection extends BaseReflection {\n    constructor(\n        readonly name: string,\n        readonly members: EnumMemberReflection[]\n    ) {\n        super();\n    }\n}\n\nexport class EnumMemberReflection extends BaseReflection {\n    constructor(\n        readonly name: string,\n        readonly value: string | number\n    ) {\n        super();\n    }\n}\n\nexport function convertEnum(symbol: ts.Symbol): EnumReflection | undefined {\n    const declarations = symbol.getDeclarations()?.filter(ts.isEnumDeclaration) ?? [];\n\n    if (!declarations.length) {\n        return;\n    }\n}\n"]}